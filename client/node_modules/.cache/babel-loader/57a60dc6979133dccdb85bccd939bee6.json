{"ast":null,"code":"var _jsxFileName = \"D:\\\\blog\\\\src\\\\App.js\";\nimport { Flex, ThemeProvider, CSSReset, ColorModeProvider } from '@chakra-ui/core';\nimport Navbar from '../components/Navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    children: /*#__PURE__*/_jsxDEV(ColorModeProvider, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        direction: \"column\",\n        align: \"center\",\n        justify: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(CSSReset, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          justify: \"center\",\n          align: \"center\",\n          w: \"100%\",\n          h: \"93vh\",\n          children: /*#__PURE__*/_jsxDEV(Component, { ...pageProps\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 3\n  }, this);\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["D:/blog/src/App.js"],"names":["Flex","ThemeProvider","CSSReset","ColorModeProvider","Navbar","MyApp","Component","pageProps"],"mappings":";AAAA,SACCA,IADD,EAECC,aAFD,EAGCC,QAHD,EAICC,iBAJD,QAKO,iBALP;AAMA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AACxC,sBACC,QAAC,aAAD;AAAA,2BACC,QAAC,iBAAD;AAAA,6BACC,QAAC,IAAD;AAAM,QAAA,SAAS,EAAC,QAAhB;AAAyB,QAAA,KAAK,EAAC,QAA/B;AAAwC,QAAA,OAAO,EAAC,QAAhD;AAAA,gCACC,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBAFD,eAGC,QAAC,IAAD;AAAM,UAAA,OAAO,EAAC,QAAd;AAAuB,UAAA,KAAK,EAAC,QAA7B;AAAsC,UAAA,CAAC,EAAC,MAAxC;AAA+C,UAAA,CAAC,EAAC,MAAjD;AAAA,iCACC,QAAC,SAAD,OAAeA;AAAf;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAaA,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KA1BSF,K;AA4BT,eAAeA,KAAf","sourcesContent":["import {\n\tFlex,\n\tThemeProvider,\n\tCSSReset,\n\tColorModeProvider,\n} from '@chakra-ui/core';\nimport Navbar from '../components/Navbar';\n\nfunction MyApp({ Component, pageProps }) {\n\treturn (\n\t\t<ThemeProvider>\n\t\t\t<ColorModeProvider>\n\t\t\t\t<Flex direction='column' align='center' justify='center'>\n\t\t\t\t\t<CSSReset />\n\t\t\t\t\t<Navbar />\n\t\t\t\t\t<Flex justify='center' align='center' w='100%' h='93vh'>\n\t\t\t\t\t\t<Component {...pageProps} />\n\t\t\t\t\t</Flex>\n\t\t\t\t</Flex>\n\t\t\t</ColorModeProvider>\n\t\t</ThemeProvider>\n\t);\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}